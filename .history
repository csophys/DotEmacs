entyr.bat
entry.bat
(partition 3 3 (range 1 10))
(map #(reduce + %) (partition 3 3 (range 1 10)))
(reduce + (map #(reduce + %) (partition 3 3 (range 1 10))))
(reduce + (pmap #(reduce + %) (partition 3 3 (range 1 10))))
(reduce + (pmap #(reduce + %) (partition 3 3 (range 1 10))))
(map #(+ %1 %2)[1 2 3 4])
(time(reduce + (pmap #(reduce + %) (partition 3 3 (range 1 10)))) )
(reduce + (map #(reduce + %) (partition 3 3 (range 1 10))))
(time (reduce + (map #(reduce + %) (partition 3 3 (range 1 10)))))
(time (reduce + (map #(reduce + %) (partition 3 3 (range 1 1000000)))))
(time (reduce + (pmap #(reduce + %) (partition 3 3 (range 1 1000000)))))
(time (reduce + (pmap #(reduce + %) (partition 3 3 (range 1 1000000)))))
(time (reduce + (pmap #(reduce + %) (partition 2 2 (range 1 1000000)))))
(time (reduce + (pmap #(reduce + %) (partition 3 3 (range 1 1000000)))))
(time (reduce + (map #(reduce + %) (partition 2 2 (range 1 1000000)))))
(time (reduce + (pmap #(reduce + %) (partition 2 2 (range 1 1000000)))))
(time (reduce + (map #(reduce + %) (partition 2 2 (range 1 1000000)))))
(time (reduce + (map #(reduce + %) (partition 2 2 (range 1 1000000)))))
(time (reduce + (pmap #(reduce + %) (partition 500000 500000 (range 1 1000000)))))
(time (reduce + (map #(reduce + %) (partition 500000 500000 (range 1 1000000)))))
(sleep 1000)
(Thread/sleep 1000)
(time (map #(Thread/sleep 1000)) [1 2 3 4 5])
(time (map (Thread/sleep 1000)) [1 2 3 4 5])
(time (map #(println 1000)) [1 2 3 4 5])
(time (map #(println "sf")) [1 2 3 4 5])
(map #(println "adsfa") [1 3])
(map (println "adsfa") [1 3])
 (time (map #(println %)) [1 2 3 4 5])

(time (map #(+ 1 %)) [1 2 3 4 5])
(time (map #(println "as") [1 2 3]))
(map #(println "as") [1 2 3])
(map #(println %) [1 2 3])
(map #(println %) [1 2 3])
(map #(println 1000) [1 2 3])
(map #(Thread/sleep %) [1 2 3])
(time  (map #(Thread/sleep %) [1 2 3]))
 (map #(Thread/sleep %) [1000 1000 1000])
(time  (map #(Thread/sleep %) [1000 1000 1000]))
 (map #(Thread/sleep %) [1000 1000 1000])
(time  (map #(Thread/sleep %) [1000 1000 1000]))
(time (doall  (map #(Thread/sleep %) [1000 1000 1000])))
 (map #(Thread/sleep %) [1000 1000 1000])
Y
entry.bat
(time (doall  (map #(Thread/sleep %) [1000 1000 1000])))
(time (doall  (pmap #(Thread/sleep %) [1000 1000 1000])))
(doall (reduce + (pmap #(reduce + %) (partition 3 3 (range 1 1000000))))))
(time(doall (reduce + (pmap #(reduce + %) (partition 3 3 (range 1 1000000))))))
(load-file "test.clj")
(load-file "test.clj")
(load-file "test.clj")
(load-file "test.clj")
(load-file "test.clj")
(load-file "test.clj")
(time (doall (map #(+ %)[1 12 3 4 4 4 ]))
(time (doall (map #(+ %)[1 12 3 4 4 4 ]))
Y
entry.bat
 (map #(Thread/sleep %) [1000 1000 1000])
 (pmap #(Thread/sleep %) [1000 1000 1000])
(time (reduce + (map #(reduce + %) (partition 5000 5000 (range 1 100000000)))))
(time (reduce + (pmap #(reduce + %) (partition 5000 5000 (range 1 100000000)))))
(load-file "test.clj")
(ns io(:use clojure.java.io))
(def f(file "test.clj"))
(copy f (file "testcopy.clj"))
(delete-file (file "testcopy.clj"))
(copy f (file "testcopy.clj"))
(def rdr(reader "test.clj"))
(def rdr(writer "testcopy.clj"))
(def rdr1(reader "test.clj"))
(copy rdr1 rdr)
(def rdr(writer "testcopy.clj" :append true))
(copy rdr1 rdr)
(copy rdr1 rdr :buffer-size 4096)
(.close rdr)
(.close rdr1)
(System/exit 0)
exit
